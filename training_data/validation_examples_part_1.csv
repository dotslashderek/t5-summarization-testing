"prompt","summary","prompt_tokens","summary_tokens"
"I'm refactoring a Node.js monolith built on Express 4 with callback hell everywhere. We want to modernize incrementally: migrate to async/await, extract microservices for auth and billing, add TypeScript, and introduce contract testing with Pact. We deploy on AWS ECS and use MongoDB. Please outline a four-phase plan that minimizes downtime, adds observability (OpenTelemetry), and shows a sample endpoint rewritten in async/await with proper error handling. Include risks and rollback steps.","Propose a four-phase Node.js modernization: migrate Express 4 callbacks to async/await, extract auth/billing microservices, add TypeScript and Pact tests, enhance observability with OpenTelemetry, show rewritten async endpoint, and include downtime mitigation, risks, and rollback.","138","94"
"We’ve got an old Python 2.7 ETL pipeline using cron jobs, manual CSV uploads, and lots of brittle regex. I want to rebuild it in Python 3.11 with Airflow or Prefect, use Pandas for transformations, and push outputs to BigQuery. Deliverables: migration plan, schema versioning strategy, validation tests, and an example DAG for one job. Mention rollback if BigQuery write fails and data privacy for PII.","Design a Python 3.11 ETL migration (Airflow/Prefect + Pandas + BigQuery): include migration plan, schema versioning, validation tests, example DAG, rollback for failed writes, and PII handling.","125","88"
"We’re building an internal CLI tool in Go that interacts with several REST APIs (GitHub, Jira, Slack). It must handle OAuth2 tokens securely, support plugins, and output both JSON and human-readable tables. Please write a technical design doc covering architecture, plugin system, testing strategy, dependency injection, and error handling conventions. Include sample CLI command implementation and how to mock external APIs for tests.","Write a Go CLI design doc: architecture, plugin system, testing, DI, error handling, secure OAuth2, JSON/table outputs, sample command, and API mocking approach.","118","89"
"Our React front end still uses class components and Redux sagas from 2017. We want to move to React 18 with functional components, hooks, React Query, and TypeScript, plus introduce Jest/Testing Library. Please outline a staged refactor plan that maintains production stability, introduces feature flags, and adds visual regression testing via Chromatic. Include example conversion of a saga to React Query hook.","Plan a React 18 migration: class → functional with hooks, add TypeScript, React Query, Jest/RTL, Chromatic visual tests, feature flags, and show saga → hook conversion example.","120","88"
"We’re preparing a new SaaS API that requires rate limiting, auth, and billing tiers. Stack: Kotlin + Ktor, Postgres, Redis. Please design the API gateway layer: outline token-based auth, rate limiting strategy, per-tier quotas, observability with Micrometer + OTEL, and a minimal example showing middleware interceptors for metrics and rate checks.","Design Kotlin Ktor API gateway: token auth, Redis-based rate limiting and quotas, Micrometer + OpenTelemetry observability, and sample middleware interceptors for metrics and rate checks.","110","82"
"We have a Java 8 codebase with servlets, hand-rolled futures, and static singletons. Propose a phased migration to Kotlin on the JVM, adopt coroutines, and replace our homegrown DI with Spring Boot 3.x or Micronaut. Requirements: zero downtime on AWS ECS + RDS, feature flags for canary, structured logging (JSON) and OpenTelemetry tracing, contract tests for our three hottest endpoints, and a rollback plan. Provide sample code for one endpoint rewritten with coroutines and tracing, risk matrix (perf, memory, GC), and a four-sprint timeline with 20% team allocation. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters.","Create a phased legacy java to kotlin refactor plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","114","22"
"We’re planning a 12-day slow-travel trip to Japan in late April, landing in Tokyo and flying out of Osaka. We love neighborhood food markets, quiet gardens, and one quirky museum per city. Constraints: avoid long stair climbs, group by neighborhood to reduce transit, keep two slow mornings per city, and include two omakase options (one splurge, one affordable). Please add rail lines, reservation notes, a packing list for variable spring weather, and rain-day alternates. Keep it calm, curated, and FOMO-free. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated slow-travel japan itinerary plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","105","20"
"We run a brittle Python 3.6 data ingestion pipeline using cron and shell scripts. Design a migration to Airflow 2 or Prefect 2 on Kubernetes, with dbt for transformations, data validation with Great Expectations, lineage via OpenLineage, and outputs to BigQuery and Parquet. Deliverables: orchestrator choice rationale, DAG examples, CI that runs unit + integration tests, cost control tactics, and a rollback story if downstream tables fail. Include PII hashing, schema evolution strategy, and SLOs for late data. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters.","Create a phased python data platform modernization plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","106","22"
"Design a two-hour wedding reception program for 120 guests in a courtyard venue with a noise curfew. Goals: joyful flow, minimal line-ups, and inclusive for older guests. Include timeline, vendor coordination checklist, plan B for rain, vegetarian/vegan options, and accessibility notes. Add a simple run-of-show and contingency roles. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated wedding reception plan plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","81","20"
"Our React app still uses class components and Redux-saga; we want to move to React 18 + Next.js App Router, server components where appropriate, TanStack Query, TypeScript, and Testing Library. Write a staged migration that preserves stability, introduces visual regression testing, i18n, and performance budgets. Include an example converting a saga to a typed query hook with retries, backoff, and OpenTelemetry web vitals. Add a rollout plan with canaries and metrics (LCP, TTFB, error rate). Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters.","Create a phased react/next.js ui refresh plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","104","21"
"Draft a grant proposal outline for a community makerspace focused on youth robotics. Include problem statement, goals, measurable outcomes, budget, timeline, partnership letters, and evaluation plan. Provide a one-page executive summary and a checklist for required attachments. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated grant proposal outline plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","73","20"
"We have a Go 1.18 service talking to Postgres and Kafka. Propose resiliency upgrades: context timeouts, circuit breakers, idempotent consumers, structured logging, OpenTelemetry traces/metrics, and graceful shutdown on ECS. Show DI patterns, table-driven tests, golden-file responses, and a load test plan with k6. Include a minimal kernel for feature flags and a rollback checklist. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased go microservice hardening plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","104","21"
"Create a 10-week fitness plan for someone returning after an injury. Include low-impact cardio, progressive strength training, mobility, and knee-friendly modifications. Add habit-building tactics, weekly check-ins, and basic nutrition guidance with grocery list templates. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated fitness reboot with knee care plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","70","21"
"We need a Rust CLI that manages IaC workflows: templating Terraform modules, scanning with tfsec, and pushing plans for approval. Specify architecture, plugin system, error handling, logging, and test strategy (property-based tests with proptest). Provide one subcommand implementation and how to mock shell commands in tests. Cover supply-chain security (SBOM, sigstore, pinned crates). Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased rust cli for devops plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","104","22"
"Build a 16-week study and project roadmap for a software engineer moving into data science. Mix Coursera/HF courses, reading, two portfolio projects, and interview prep. Include weekly goals, assessment checkpoints, and community participation ideas. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated career pivot into data science plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","70","21"
"Design a multi-tenant EKS setup with strict network policies, per-namespace quotas, OPA Gatekeeper, ingress with rate limiting, and cost attribution by team. Include a GitOps flow with Argo CD, secrets via SOPS/KSOPS, and audit logging. Deliver a runbook for on-call, SLOs, and a progressive delivery strategy (blue/green or canary). Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased kubernetes multi-tenant platform plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","100","21"
"Propose a renovation plan for a 3x2.4m kitchen in an older building. Budget £9–12k, daily cooking, induction hob, strong ventilation, durable surfaces. Compare galley vs L layout, storage, lighting, phased schedule to minimize downtime, line-item budget, and snagging checklist. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated home kitchen renovation plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","74","20"
"Draft a plan to split a monolith into event-driven services using Kafka. Define topics, schemas with Schema Registry, dead-letter handling, idempotency, and exactly-once semantics where feasible. Add consumer lag SLOs, replay strategy, observability, and a sample producer/consumer pair with tracing. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased event-driven architecture with kafka plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","94","22"
"Outline a concise, visual annual report for a small nonprofit. Sections: mission impact, program highlights, donor thanks, financial snapshot, and next-year goals. Add accessibility guidance and a lightweight data validation checklist. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated nonprofit annual report plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","68","20"
"We want a feature store to unify online/offline features for a real-time recommendation system. Compare Feast vs custom on Redis + Parquet. Describe data contracts, backfills, latency budgets, monitoring for training/serving skew, and lineage. Provide a minimal example pipeline and an A/B testing strategy. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased ml feature store rollout plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","97","22"
"Plan a 6-week sprint to reach conversational Spanish. Daily micro-sessions, weekend longer practice, resources/apps, conversation partners, and progress metrics. Include travel scenarios and a polite-phrases cheat sheet. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated language-learning sprint plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","65","19"
"Define a gateway layer for tiered rate limits and quotas with Redis, JWT auth, and request-level metrics. Include spike arrest, burst handling, and retries with jitter. Provide example middleware and metrics dashboards. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased api gateway rate limiting & quotas plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","88","23"
"Create a moving plan for a family of four relocating across town. Timeline, packing strategy, utilities transfer, pet considerations, fragile items, and day-of checklist. Suggest budget-saving tips and a labeling scheme. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated house move logistics plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","68","20"
"We need an OTEL-first observability plan: traces, metrics, logs, exemplars, and RED/USE dashboards. Detail sampling strategies, baggage/correlation IDs, and a cost-aware retention policy. Include incident response playbooks and SLO error budgeting. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased observability overhaul plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","87","20"
"Design a one-day, 150-person conference agenda with two tracks and a keynote. Balance talks/workshops, breaks, AV needs, accessibility, and a feedback loop. Provide a speaker comms template and run-of-show. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated small conference agenda plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","67","20"
"We have a Java 8 codebase with servlets, hand-rolled futures, and static singletons. Propose a phased migration to Kotlin on the JVM, adopt coroutines, and replace our homegrown DI with Spring Boot 3.x or Micronaut. Requirements: zero downtime on AWS ECS + RDS, feature flags for canary, structured logging (JSON) and OpenTelemetry tracing, contract tests for our three hottest endpoints, and a rollback plan. Provide sample code for one endpoint rewritten with coroutines and tracing, risk matrix (perf, memory, GC), and a four-sprint timeline with 20% team allocation. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters.","Create a phased legacy java to kotlin refactor plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","114","22"
"We’re planning a 12-day slow-travel trip to Japan in late April, landing in Tokyo and flying out of Osaka. We love neighborhood food markets, quiet gardens, and one quirky museum per city. Constraints: avoid long stair climbs, group by neighborhood to reduce transit, keep two slow mornings per city, and include two omakase options (one splurge, one affordable). Please add rail lines, reservation notes, a packing list for variable spring weather, and rain-day alternates. Keep it calm, curated, and FOMO-free. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated slow-travel japan itinerary plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","105","20"
"We run a brittle Python 3.6 data ingestion pipeline using cron and shell scripts. Design a migration to Airflow 2 or Prefect 2 on Kubernetes, with dbt for transformations, data validation with Great Expectations, lineage via OpenLineage, and outputs to BigQuery and Parquet. Deliverables: orchestrator choice rationale, DAG examples, CI that runs unit + integration tests, cost control tactics, and a rollback story if downstream tables fail. Include PII hashing, schema evolution strategy, and SLOs for late data. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters.","Create a phased python data platform modernization plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","106","22"
"Design a two-hour wedding reception program for 120 guests in a courtyard venue with a noise curfew. Goals: joyful flow, minimal line-ups, and inclusive for older guests. Include timeline, vendor coordination checklist, plan B for rain, vegetarian/vegan options, and accessibility notes. Add a simple run-of-show and contingency roles. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated wedding reception plan plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","81","20"
"Our React app still uses class components and Redux-saga; we want to move to React 18 + Next.js App Router, server components where appropriate, TanStack Query, TypeScript, and Testing Library. Write a staged migration that preserves stability, introduces visual regression testing, i18n, and performance budgets. Include an example converting a saga to a typed query hook with retries, backoff, and OpenTelemetry web vitals. Add a rollout plan with canaries and metrics (LCP, TTFB, error rate). Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters.","Create a phased react/next.js ui refresh plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","104","21"
"Draft a grant proposal outline for a community makerspace focused on youth robotics. Include problem statement, goals, measurable outcomes, budget, timeline, partnership letters, and evaluation plan. Provide a one-page executive summary and a checklist for required attachments. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated grant proposal outline plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","73","20"
"We have a Go 1.18 service talking to Postgres and Kafka. Propose resiliency upgrades: context timeouts, circuit breakers, idempotent consumers, structured logging, OpenTelemetry traces/metrics, and graceful shutdown on ECS. Show DI patterns, table-driven tests, golden-file responses, and a load test plan with k6. Include a minimal kernel for feature flags and a rollback checklist. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased go microservice hardening plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","104","21"
"Create a 10-week fitness plan for someone returning after an injury. Include low-impact cardio, progressive strength training, mobility, and knee-friendly modifications. Add habit-building tactics, weekly check-ins, and basic nutrition guidance with grocery list templates. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated fitness reboot with knee care plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","70","21"
"We need a Rust CLI that manages IaC workflows: templating Terraform modules, scanning with tfsec, and pushing plans for approval. Specify architecture, plugin system, error handling, logging, and test strategy (property-based tests with proptest). Provide one subcommand implementation and how to mock shell commands in tests. Cover supply-chain security (SBOM, sigstore, pinned crates). Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased rust cli for devops plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","104","22"
"Build a 16-week study and project roadmap for a software engineer moving into data science. Mix Coursera/HF courses, reading, two portfolio projects, and interview prep. Include weekly goals, assessment checkpoints, and community participation ideas. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated career pivot into data science plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","70","21"
"Design a multi-tenant EKS setup with strict network policies, per-namespace quotas, OPA Gatekeeper, ingress with rate limiting, and cost attribution by team. Include a GitOps flow with Argo CD, secrets via SOPS/KSOPS, and audit logging. Deliver a runbook for on-call, SLOs, and a progressive delivery strategy (blue/green or canary). Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased kubernetes multi-tenant platform plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","100","21"
"Propose a renovation plan for a 3x2.4m kitchen in an older building. Budget £9–12k, daily cooking, induction hob, strong ventilation, durable surfaces. Compare galley vs L layout, storage, lighting, phased schedule to minimize downtime, line-item budget, and snagging checklist. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated home kitchen renovation plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","74","20"
"Draft a plan to split a monolith into event-driven services using Kafka. Define topics, schemas with Schema Registry, dead-letter handling, idempotency, and exactly-once semantics where feasible. Add consumer lag SLOs, replay strategy, observability, and a sample producer/consumer pair with tracing. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased event-driven architecture with kafka plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","94","22"
"Outline a concise, visual annual report for a small nonprofit. Sections: mission impact, program highlights, donor thanks, financial snapshot, and next-year goals. Add accessibility guidance and a lightweight data validation checklist. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated nonprofit annual report plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","68","20"
"We want a feature store to unify online/offline features for a real-time recommendation system. Compare Feast vs custom on Redis + Parquet. Describe data contracts, backfills, latency budgets, monitoring for training/serving skew, and lineage. Provide a minimal example pipeline and an A/B testing strategy. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased ml feature store rollout plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","97","22"
"Plan a 6-week sprint to reach conversational Spanish. Daily micro-sessions, weekend longer practice, resources/apps, conversation partners, and progress metrics. Include travel scenarios and a polite-phrases cheat sheet. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated language-learning sprint plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","65","19"
"Define a gateway layer for tiered rate limits and quotas with Redis, JWT auth, and request-level metrics. Include spike arrest, burst handling, and retries with jitter. Provide example middleware and metrics dashboards. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased api gateway rate limiting & quotas plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","88","23"
"Create a moving plan for a family of four relocating across town. Timeline, packing strategy, utilities transfer, pet considerations, fragile items, and day-of checklist. Suggest budget-saving tips and a labeling scheme. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated house move logistics plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","68","20"
"We need an OTEL-first observability plan: traces, metrics, logs, exemplars, and RED/USE dashboards. Detail sampling strategies, baggage/correlation IDs, and a cost-aware retention policy. Include incident response playbooks and SLO error budgeting. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased observability overhaul plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","87","20"
"Design a one-day, 150-person conference agenda with two tracks and a keynote. Balance talks/workshops, breaks, AV needs, accessibility, and a feedback loop. Provide a speaker comms template and run-of-show. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated small conference agenda plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","67","20"
"We have a Java 8 codebase with servlets, hand-rolled futures, and static singletons. Propose a phased migration to Kotlin on the JVM, adopt coroutines, and replace our homegrown DI with Spring Boot 3.x or Micronaut. Requirements: zero downtime on AWS ECS + RDS, feature flags for canary, structured logging (JSON) and OpenTelemetry tracing, contract tests for our three hottest endpoints, and a rollback plan. Provide sample code for one endpoint rewritten with coroutines and tracing, risk matrix (perf, memory, GC), and a four-sprint timeline with 20% team allocation. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters.","Create a phased legacy java to kotlin refactor plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","114","22"
"We’re planning a 12-day slow-travel trip to Japan in late April, landing in Tokyo and flying out of Osaka. We love neighborhood food markets, quiet gardens, and one quirky museum per city. Constraints: avoid long stair climbs, group by neighborhood to reduce transit, keep two slow mornings per city, and include two omakase options (one splurge, one affordable). Please add rail lines, reservation notes, a packing list for variable spring weather, and rain-day alternates. Keep it calm, curated, and FOMO-free. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated slow-travel japan itinerary plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","105","20"
"We run a brittle Python 3.6 data ingestion pipeline using cron and shell scripts. Design a migration to Airflow 2 or Prefect 2 on Kubernetes, with dbt for transformations, data validation with Great Expectations, lineage via OpenLineage, and outputs to BigQuery and Parquet. Deliverables: orchestrator choice rationale, DAG examples, CI that runs unit + integration tests, cost control tactics, and a rollback story if downstream tables fail. Include PII hashing, schema evolution strategy, and SLOs for late data. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters.","Create a phased python data platform modernization plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","106","22"
"Design a two-hour wedding reception program for 120 guests in a courtyard venue with a noise curfew. Goals: joyful flow, minimal line-ups, and inclusive for older guests. Include timeline, vendor coordination checklist, plan B for rain, vegetarian/vegan options, and accessibility notes. Add a simple run-of-show and contingency roles. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated wedding reception plan plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","81","20"
"Our React app still uses class components and Redux-saga; we want to move to React 18 + Next.js App Router, server components where appropriate, TanStack Query, TypeScript, and Testing Library. Write a staged migration that preserves stability, introduces visual regression testing, i18n, and performance budgets. Include an example converting a saga to a typed query hook with retries, backoff, and OpenTelemetry web vitals. Add a rollout plan with canaries and metrics (LCP, TTFB, error rate). Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters.","Create a phased react/next.js ui refresh plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","104","21"
"Draft a grant proposal outline for a community makerspace focused on youth robotics. Include problem statement, goals, measurable outcomes, budget, timeline, partnership letters, and evaluation plan. Provide a one-page executive summary and a checklist for required attachments. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated grant proposal outline plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","73","20"
"We have a Go 1.18 service talking to Postgres and Kafka. Propose resiliency upgrades: context timeouts, circuit breakers, idempotent consumers, structured logging, OpenTelemetry traces/metrics, and graceful shutdown on ECS. Show DI patterns, table-driven tests, golden-file responses, and a load test plan with k6. Include a minimal kernel for feature flags and a rollback checklist. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased go microservice hardening plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","104","21"
"Create a 10-week fitness plan for someone returning after an injury. Include low-impact cardio, progressive strength training, mobility, and knee-friendly modifications. Add habit-building tactics, weekly check-ins, and basic nutrition guidance with grocery list templates. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated fitness reboot with knee care plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","70","21"
"We need a Rust CLI that manages IaC workflows: templating Terraform modules, scanning with tfsec, and pushing plans for approval. Specify architecture, plugin system, error handling, logging, and test strategy (property-based tests with proptest). Provide one subcommand implementation and how to mock shell commands in tests. Cover supply-chain security (SBOM, sigstore, pinned crates). Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased rust cli for devops plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","104","22"
"Build a 16-week study and project roadmap for a software engineer moving into data science. Mix Coursera/HF courses, reading, two portfolio projects, and interview prep. Include weekly goals, assessment checkpoints, and community participation ideas. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated career pivot into data science plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","70","21"
"Design a multi-tenant EKS setup with strict network policies, per-namespace quotas, OPA Gatekeeper, ingress with rate limiting, and cost attribution by team. Include a GitOps flow with Argo CD, secrets via SOPS/KSOPS, and audit logging. Deliver a runbook for on-call, SLOs, and a progressive delivery strategy (blue/green or canary). Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased kubernetes multi-tenant platform plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","100","21"
"Propose a renovation plan for a 3x2.4m kitchen in an older building. Budget £9–12k, daily cooking, induction hob, strong ventilation, durable surfaces. Compare galley vs L layout, storage, lighting, phased schedule to minimize downtime, line-item budget, and snagging checklist. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated home kitchen renovation plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","74","20"
"Draft a plan to split a monolith into event-driven services using Kafka. Define topics, schemas with Schema Registry, dead-letter handling, idempotency, and exactly-once semantics where feasible. Add consumer lag SLOs, replay strategy, observability, and a sample producer/consumer pair with tracing. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased event-driven architecture with kafka plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","94","22"
"Outline a concise, visual annual report for a small nonprofit. Sections: mission impact, program highlights, donor thanks, financial snapshot, and next-year goals. Add accessibility guidance and a lightweight data validation checklist. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated nonprofit annual report plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","68","20"
"We want a feature store to unify online/offline features for a real-time recommendation system. Compare Feast vs custom on Redis + Parquet. Describe data contracts, backfills, latency budgets, monitoring for training/serving skew, and lineage. Provide a minimal example pipeline and an A/B testing strategy. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased ml feature store rollout plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","97","22"
"Plan a 6-week sprint to reach conversational Spanish. Daily micro-sessions, weekend longer practice, resources/apps, conversation partners, and progress metrics. Include travel scenarios and a polite-phrases cheat sheet. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated language-learning sprint plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","65","19"
"Define a gateway layer for tiered rate limits and quotas with Redis, JWT auth, and request-level metrics. Include spike arrest, burst handling, and retries with jitter. Provide example middleware and metrics dashboards. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased api gateway rate limiting & quotas plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","88","23"
"Create a moving plan for a family of four relocating across town. Timeline, packing strategy, utilities transfer, pet considerations, fragile items, and day-of checklist. Suggest budget-saving tips and a labeling scheme. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated house move logistics plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","68","20"
"We need an OTEL-first observability plan: traces, metrics, logs, exemplars, and RED/USE dashboards. Detail sampling strategies, baggage/correlation IDs, and a cost-aware retention policy. Include incident response playbooks and SLO error budgeting. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased observability overhaul plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","87","20"
"Design a one-day, 150-person conference agenda with two tracks and a keynote. Balance talks/workshops, breaks, AV needs, accessibility, and a feedback loop. Provide a speaker comms template and run-of-show. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated small conference agenda plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","67","20"
"We have a Java 8 codebase with servlets, hand-rolled futures, and static singletons. Propose a phased migration to Kotlin on the JVM, adopt coroutines, and replace our homegrown DI with Spring Boot 3.x or Micronaut. Requirements: zero downtime on AWS ECS + RDS, feature flags for canary, structured logging (JSON) and OpenTelemetry tracing, contract tests for our three hottest endpoints, and a rollback plan. Provide sample code for one endpoint rewritten with coroutines and tracing, risk matrix (perf, memory, GC), and a four-sprint timeline with 20% team allocation. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters.","Create a phased legacy java to kotlin refactor plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","114","22"
"We’re planning a 12-day slow-travel trip to Japan in late April, landing in Tokyo and flying out of Osaka. We love neighborhood food markets, quiet gardens, and one quirky museum per city. Constraints: avoid long stair climbs, group by neighborhood to reduce transit, keep two slow mornings per city, and include two omakase options (one splurge, one affordable). Please add rail lines, reservation notes, a packing list for variable spring weather, and rain-day alternates. Keep it calm, curated, and FOMO-free. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated slow-travel japan itinerary plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","105","20"
"We run a brittle Python 3.6 data ingestion pipeline using cron and shell scripts. Design a migration to Airflow 2 or Prefect 2 on Kubernetes, with dbt for transformations, data validation with Great Expectations, lineage via OpenLineage, and outputs to BigQuery and Parquet. Deliverables: orchestrator choice rationale, DAG examples, CI that runs unit + integration tests, cost control tactics, and a rollback story if downstream tables fail. Include PII hashing, schema evolution strategy, and SLOs for late data. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters.","Create a phased python data platform modernization plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","106","22"
"Design a two-hour wedding reception program for 120 guests in a courtyard venue with a noise curfew. Goals: joyful flow, minimal line-ups, and inclusive for older guests. Include timeline, vendor coordination checklist, plan B for rain, vegetarian/vegan options, and accessibility notes. Add a simple run-of-show and contingency roles. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated wedding reception plan plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","81","20"
"Our React app still uses class components and Redux-saga; we want to move to React 18 + Next.js App Router, server components where appropriate, TanStack Query, TypeScript, and Testing Library. Write a staged migration that preserves stability, introduces visual regression testing, i18n, and performance budgets. Include an example converting a saga to a typed query hook with retries, backoff, and OpenTelemetry web vitals. Add a rollout plan with canaries and metrics (LCP, TTFB, error rate). Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters.","Create a phased react/next.js ui refresh plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","104","21"
"Draft a grant proposal outline for a community makerspace focused on youth robotics. Include problem statement, goals, measurable outcomes, budget, timeline, partnership letters, and evaluation plan. Provide a one-page executive summary and a checklist for required attachments. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated grant proposal outline plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","73","20"
"We have a Go 1.18 service talking to Postgres and Kafka. Propose resiliency upgrades: context timeouts, circuit breakers, idempotent consumers, structured logging, OpenTelemetry traces/metrics, and graceful shutdown on ECS. Show DI patterns, table-driven tests, golden-file responses, and a load test plan with k6. Include a minimal kernel for feature flags and a rollback checklist. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased go microservice hardening plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","104","21"
"Create a 10-week fitness plan for someone returning after an injury. Include low-impact cardio, progressive strength training, mobility, and knee-friendly modifications. Add habit-building tactics, weekly check-ins, and basic nutrition guidance with grocery list templates. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated fitness reboot with knee care plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","70","21"
"We need a Rust CLI that manages IaC workflows: templating Terraform modules, scanning with tfsec, and pushing plans for approval. Specify architecture, plugin system, error handling, logging, and test strategy (property-based tests with proptest). Provide one subcommand implementation and how to mock shell commands in tests. Cover supply-chain security (SBOM, sigstore, pinned crates). Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased rust cli for devops plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","104","22"
"Build a 16-week study and project roadmap for a software engineer moving into data science. Mix Coursera/HF courses, reading, two portfolio projects, and interview prep. Include weekly goals, assessment checkpoints, and community participation ideas. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated career pivot into data science plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","70","21"
"Design a multi-tenant EKS setup with strict network policies, per-namespace quotas, OPA Gatekeeper, ingress with rate limiting, and cost attribution by team. Include a GitOps flow with Argo CD, secrets via SOPS/KSOPS, and audit logging. Deliver a runbook for on-call, SLOs, and a progressive delivery strategy (blue/green or canary). Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased kubernetes multi-tenant platform plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","100","21"
"Propose a renovation plan for a 3x2.4m kitchen in an older building. Budget £9–12k, daily cooking, induction hob, strong ventilation, durable surfaces. Compare galley vs L layout, storage, lighting, phased schedule to minimize downtime, line-item budget, and snagging checklist. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated home kitchen renovation plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","74","20"
"Draft a plan to split a monolith into event-driven services using Kafka. Define topics, schemas with Schema Registry, dead-letter handling, idempotency, and exactly-once semantics where feasible. Add consumer lag SLOs, replay strategy, observability, and a sample producer/consumer pair with tracing. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased event-driven architecture with kafka plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","94","22"
"Outline a concise, visual annual report for a small nonprofit. Sections: mission impact, program highlights, donor thanks, financial snapshot, and next-year goals. Add accessibility guidance and a lightweight data validation checklist. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated nonprofit annual report plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","68","20"
"We want a feature store to unify online/offline features for a real-time recommendation system. Compare Feast vs custom on Redis + Parquet. Describe data contracts, backfills, latency budgets, monitoring for training/serving skew, and lineage. Provide a minimal example pipeline and an A/B testing strategy. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased ml feature store rollout plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","97","22"
"Plan a 6-week sprint to reach conversational Spanish. Daily micro-sessions, weekend longer practice, resources/apps, conversation partners, and progress metrics. Include travel scenarios and a polite-phrases cheat sheet. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated language-learning sprint plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","65","19"
"Define a gateway layer for tiered rate limits and quotas with Redis, JWT auth, and request-level metrics. Include spike arrest, burst handling, and retries with jitter. Provide example middleware and metrics dashboards. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased api gateway rate limiting & quotas plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","88","23"
"Create a moving plan for a family of four relocating across town. Timeline, packing strategy, utilities transfer, pet considerations, fragile items, and day-of checklist. Suggest budget-saving tips and a labeling scheme. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated house move logistics plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","68","20"
"We need an OTEL-first observability plan: traces, metrics, logs, exemplars, and RED/USE dashboards. Detail sampling strategies, baggage/correlation IDs, and a cost-aware retention policy. Include incident response playbooks and SLO error budgeting. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased observability overhaul plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","87","20"
"Design a one-day, 150-person conference agenda with two tracks and a keynote. Balance talks/workshops, breaks, AV needs, accessibility, and a feedback loop. Provide a speaker comms template and run-of-show. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated small conference agenda plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","67","20"
"We have a Java 8 codebase with servlets, hand-rolled futures, and static singletons. Propose a phased migration to Kotlin on the JVM, adopt coroutines, and replace our homegrown DI with Spring Boot 3.x or Micronaut. Requirements: zero downtime on AWS ECS + RDS, feature flags for canary, structured logging (JSON) and OpenTelemetry tracing, contract tests for our three hottest endpoints, and a rollback plan. Provide sample code for one endpoint rewritten with coroutines and tracing, risk matrix (perf, memory, GC), and a four-sprint timeline with 20% team allocation. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters.","Create a phased legacy java to kotlin refactor plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","114","22"
"We’re planning a 12-day slow-travel trip to Japan in late April, landing in Tokyo and flying out of Osaka. We love neighborhood food markets, quiet gardens, and one quirky museum per city. Constraints: avoid long stair climbs, group by neighborhood to reduce transit, keep two slow mornings per city, and include two omakase options (one splurge, one affordable). Please add rail lines, reservation notes, a packing list for variable spring weather, and rain-day alternates. Keep it calm, curated, and FOMO-free. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated slow-travel japan itinerary plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","105","20"
"We run a brittle Python 3.6 data ingestion pipeline using cron and shell scripts. Design a migration to Airflow 2 or Prefect 2 on Kubernetes, with dbt for transformations, data validation with Great Expectations, lineage via OpenLineage, and outputs to BigQuery and Parquet. Deliverables: orchestrator choice rationale, DAG examples, CI that runs unit + integration tests, cost control tactics, and a rollback story if downstream tables fail. Include PII hashing, schema evolution strategy, and SLOs for late data. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters.","Create a phased python data platform modernization plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","106","22"
"Design a two-hour wedding reception program for 120 guests in a courtyard venue with a noise curfew. Goals: joyful flow, minimal line-ups, and inclusive for older guests. Include timeline, vendor coordination checklist, plan B for rain, vegetarian/vegan options, and accessibility notes. Add a simple run-of-show and contingency roles. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated wedding reception plan plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","81","20"
"Our React app still uses class components and Redux-saga; we want to move to React 18 + Next.js App Router, server components where appropriate, TanStack Query, TypeScript, and Testing Library. Write a staged migration that preserves stability, introduces visual regression testing, i18n, and performance budgets. Include an example converting a saga to a typed query hook with retries, backoff, and OpenTelemetry web vitals. Add a rollout plan with canaries and metrics (LCP, TTFB, error rate). Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters.","Create a phased react/next.js ui refresh plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","104","21"
"Draft a grant proposal outline for a community makerspace focused on youth robotics. Include problem statement, goals, measurable outcomes, budget, timeline, partnership letters, and evaluation plan. Provide a one-page executive summary and a checklist for required attachments. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated grant proposal outline plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","73","20"
"We have a Go 1.18 service talking to Postgres and Kafka. Propose resiliency upgrades: context timeouts, circuit breakers, idempotent consumers, structured logging, OpenTelemetry traces/metrics, and graceful shutdown on ECS. Show DI patterns, table-driven tests, golden-file responses, and a load test plan with k6. Include a minimal kernel for feature flags and a rollback checklist. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased go microservice hardening plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","104","21"
"Create a 10-week fitness plan for someone returning after an injury. Include low-impact cardio, progressive strength training, mobility, and knee-friendly modifications. Add habit-building tactics, weekly check-ins, and basic nutrition guidance with grocery list templates. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated fitness reboot with knee care plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","70","21"
"We need a Rust CLI that manages IaC workflows: templating Terraform modules, scanning with tfsec, and pushing plans for approval. Specify architecture, plugin system, error handling, logging, and test strategy (property-based tests with proptest). Provide one subcommand implementation and how to mock shell commands in tests. Cover supply-chain security (SBOM, sigstore, pinned crates). Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased rust cli for devops plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","104","22"
"Build a 16-week study and project roadmap for a software engineer moving into data science. Mix Coursera/HF courses, reading, two portfolio projects, and interview prep. Include weekly goals, assessment checkpoints, and community participation ideas. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated career pivot into data science plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","70","21"
"Design a multi-tenant EKS setup with strict network policies, per-namespace quotas, OPA Gatekeeper, ingress with rate limiting, and cost attribution by team. Include a GitOps flow with Argo CD, secrets via SOPS/KSOPS, and audit logging. Deliver a runbook for on-call, SLOs, and a progressive delivery strategy (blue/green or canary). Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased kubernetes multi-tenant platform plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","100","21"
"Propose a renovation plan for a 3x2.4m kitchen in an older building. Budget £9–12k, daily cooking, induction hob, strong ventilation, durable surfaces. Compare galley vs L layout, storage, lighting, phased schedule to minimize downtime, line-item budget, and snagging checklist. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated home kitchen renovation plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","74","20"
"Draft a plan to split a monolith into event-driven services using Kafka. Define topics, schemas with Schema Registry, dead-letter handling, idempotency, and exactly-once semantics where feasible. Add consumer lag SLOs, replay strategy, observability, and a sample producer/consumer pair with tracing. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased event-driven architecture with kafka plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","94","22"
"Outline a concise, visual annual report for a small nonprofit. Sections: mission impact, program highlights, donor thanks, financial snapshot, and next-year goals. Add accessibility guidance and a lightweight data validation checklist. Please provide a day-by-day or step-by-step plan, call out reservations or tickets required, and add clear success metrics. Include a compact packing or preparation list and a short FAQ addressing common objections. Offer rain/backup alternatives or contingencies where relevant, and propose a simple budget range. Provide a realistic timeline, cost ranges, and clear next steps for each day or phase.","Deliver a curated nonprofit annual report plan with neighborhood/step grouping, reservations/tickets, success metrics, compact prep list, FAQ, and sensible budget. Keep it calm, well-scoped, and practical.","68","20"
"We want a feature store to unify online/offline features for a real-time recommendation system. Compare Feast vs custom on Redis + Parquet. Describe data contracts, backfills, latency budgets, monitoring for training/serving skew, and lineage. Provide a minimal example pipeline and an A/B testing strategy. Also include deliverables: architectural diagrams (text description acceptable), risk/mitigation table, and a phased rollout with explicit acceptance criteria per phase. Constraints: zero downtime, AWS ECS Fargate, RDS Postgres, 20% engineering capacity across four sprints. Please ensure all recommendations are vendor-agnostic where possible and call out assumptions explicitly. Add a small appendix listing tools, versions, and a minimal Makefile target to run tests and linters. Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria.  Add assumptions, constraints, and measurable acceptance criteria. ","Create a phased ml feature store rollout plan with zero-downtime rollout on ECS/RDS: specific deliverables (tests, diagrams, OTEL), risks/mitigations, and sample code or configs. Keep it concise and outcome-focused.","97","22"
